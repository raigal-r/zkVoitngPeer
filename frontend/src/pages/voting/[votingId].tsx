import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { Layout } from "../../features/Layout";
import {
  useCastVotePaymaster,
  useGetProposal,
  useGetProposalState,
  useGetVotes,
} from "src/hooks/useCreateProposal";

const Welcome: NextPage = () => {
  const router = useRouter();
  const { votingId } = router.query;
  const proposalState = useGetProposalState({ proposalId: votingId as string });
  // Create a function to use useCastVote hook to vote yes/no
  const castVote = useCastVotePaymaster();
  const votes = useGetVotes({
    proposalId: votingId as string,
  });
  const proposalData = useGetProposal({
    proposalId: votingId as string,
  });

  return (
    <>
      <Head>
        <title>{proposalData.data?.proposalCreateds[0]?.proposer}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="container flex w-full gap-12 px-4 py-16 ">
          <div className="flex w-2/3 flex-col">
            <h2>
              Subject: {proposalData.data?.proposalCreateds[0]?.proposer}
              ID: {votingId}
            </h2>
            <div className="badge-secondary badge">
              status: {proposalState.data}
            </div>
            <p className="">
              {proposalData.data?.proposalCreateds[0]?.description}
            </p>
            <div className="flex flex-col">
              <p>History:</p>
              <div className="flex flex-col">
                {votes.data?.votes?.map((item) => (
                  <div className="flex flex-col" key={item.transactionHash}>
                    <p>{item.voter}</p>
                    <p>{item.support === 0 ? "NO" : "YES"}</p>
                    <p>{new Date(item.blockTimestamp * 1000).toDateString()}</p>
                  </div>
                ))}
              </div>
            </div>
          </div>
          <div className="flex w-1/3 flex-col">
            Please vote yes / no below. Voting ends in 15d, 12h, 32m
            <p>
              Total votes: {Number(votes.data?.yes) + Number(votes.data?.no)}
            </p>
            Yes: {votes.data?.yes} No: {votes.data?.no}
            <div className="flex ">
              <button
                className="mx-15 btn-accent btn"
                onClick={() =>
                  castVote.mutate({
                    proposalId: votingId as string,
                    vote: 1, //
                  })
                }
              >
                Yes
              </button>
              <button
                className="btn-secondary btn py-10"
                onClick={() =>
                  castVote.mutate({
                    proposalId: votingId as string,
                    vote: 0, //
                  })
                }
              >
                No
              </button>
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};

export default Welcome;
