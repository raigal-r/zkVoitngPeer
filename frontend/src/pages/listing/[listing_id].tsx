import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { Layout } from "../../features/Layout";
import { useOfferIPFS } from "src/features/peerlocal/hooks/usePeerLocal";
import { useOffer } from "src/features/peerlocal/hooks/usePeerLocal";
import { usePeerLocalContract } from "src/features/peerlocal/hooks/usePeerLocalContract";
import { Loading } from "../../features/Loading";

const Listing: NextPage = () => {
  const router = useRouter();
  const hash = router.query.listing_id
    ? router.query.listing_id.toString()
    : "0";
  const nIFPS = useOfferIPFS({ ipfsHash: hash });
  const cOffer = useOffer({ metadata: hash });
  const { acceptOffer, endOffer } = usePeerLocalContract();
  const cId = cOffer.data?.community.id
    ? cOffer.data?.community.id.toString()
    : "";
  const borrowHandler = async () => {
    if (cOffer.data?.offerStatus === "ACTIVE") {
      console.log("endOffer", cOffer.data?.offerId);
      await endOffer.mutateAsync({
        communityId: cId,
        offerId: cOffer.data?.offerId,
        result: true,
      });
    } else {
      console.log("acceptOffer", cOffer.data?.offerId);
      const res = await acceptOffer.mutateAsync({
        communityId: cId,
        offerId: cOffer.data?.offerId,
      });
      console.log("res", res);
    }
    await router.back();
  };

  return (
    <>
      <Head>
        <title>Welcome Personal Page</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="card min-h-[90%] w-96 bg-base-100 shadow-xl">
          <div className="container flex flex-col items-center justify-center gap-2 px-4 py-5 ">
            <figure>
              <img src={"/drill.jpg"} alt={nIFPS.data?.Name} />
            </figure>
            <h2 className="">{nIFPS.data?.Name}</h2>
            <p className="mt-5">{nIFPS.data?.Description}</p>
            <div className="flex flex-row">
              <button
                className="btn-neutral btn"
                onClick={() => router.back()}
                disabled={acceptOffer.isLoading}
              >
                Back
              </button>
              <button
                className="btn-primary btn"
                onClick={borrowHandler}
                disabled={acceptOffer.isLoading}
              >
                {acceptOffer.isLoading ? (
                  <Loading />
                ) : cOffer?.data?.offerStatus === "ACTIVE" ? (
                  "End"
                ) : (
                  `Borrow for ${cOffer.data?.stakingRequirement} GHO`
                )}
              </button>
              {cOffer?.data?.offerStatus === "ACTIVE" && (
                <div className="flex flex-col">
                  Confirmed by owner
                  <input type="checkbox" checked={false} className="checkbox" />
                  Confirmed by borrower
                  <input type="checkbox" checked={false} className="checkbox" />
                </div>
              )}
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};

export default Listing;
