import { type NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { Layout } from "../../features/Layout";
import {
  useCommunity,
  useCommunityIPFS,
} from "src/features/peerlocal/hooks/usePeerLocal";
import { usePeerLocalContract } from "src/features/peerlocal/hooks/usePeerLocalContract";
import { useMutation } from "@tanstack/react-query";
import { TestERC20__factory } from "../../typechain";
import { useSigner } from "wagmi";
import { ethers } from "ethers";
import { Loading } from "../../features/Loading";

const Welcome: NextPage = () => {
  const router = useRouter();
  const signer = useSigner();
  const c = useCommunity({
    id: router.query.welcome_id ? router.query.welcome_id.toString() : "0",
  });
  const ci = useCommunityIPFS({ ipfsHash: c.data?.community?.ipfsMetadata });
  const sig = router.query.signature ? router.query.signature?.toString() : "";
  const { joinCommunity } = usePeerLocalContract();

  const increaseAllowance = useMutation(
    async (variables: { amount: string }) => {
      if (!signer.data) throw new Error("No signer");
      const dai = TestERC20__factory.connect(
        "0xd9662ae38fb577a3f6843b6b8eb5af3410889f3a",
        signer.data
      );

      const addr = await signer.data.getAddress();
      const balance = await dai.balanceOf(addr);
      const allowance = await dai.allowance(
        addr,
        "0x3FB2B8E670187d2587f8C03652F2072CaaD15745"
      );
      console.log("Allowance: " + allowance.toString());
      if (allowance.gte(variables.amount)) return null;
      console.log("Balance: " + balance.toString());

      const tx1 = await dai.approve(
        "0x3FB2B8E670187d2587f8C03652F2072CaaD15745",
        ethers.constants.MaxUint256
      );
      await tx1.wait();
      console.log("Approved");
      return tx1;
    }
  );

  // @ts-ignore
  const joinHandler = async (e) => {
    e.preventDefault();
    await increaseAllowance.mutateAsync({
      amount: ethers.constants.MaxUint256.toString(),
    });
    await joinCommunity.mutateAsync({
      communityId: router.query.welcome_id
        ? router.query.welcome_id.toString()
        : "",
      ownerSignature: sig,
    });
    await router.push(
      `/landing/${
        router.query.welcome_id ? router.query.welcome_id.toString() : ""
      }`
    );
  };

  return (
    <>
      <Head>
        <title>Welcome Personal Page</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          {c.isLoading || ci.isLoading ? (
            <Loading />
          ) : (
            <>
              <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
                Welcome to our{" "}
                <span className="text-accent">{ci.data?.Name}</span>, DAO;
                Please stake{" "}
                <span className="text-accent">
                  {c.data?.community?.stakingRequirement} DAI
                </span>
                , into our community pool to generate yield for local
                development
              </h1>
              <button
                className="mw-50 btn-accent btn"
                onClick={joinHandler}
                disabled={
                  increaseAllowance.isLoading || joinCommunity.isLoading
                }
              >
                {increaseAllowance.isLoading || joinCommunity.isLoading ? (
                  <Loading />
                ) : (
                  "Join"
                )}
              </button>
            </>
          )}
        </div>
      </Layout>
    </>
  );
};

export default Welcome;
