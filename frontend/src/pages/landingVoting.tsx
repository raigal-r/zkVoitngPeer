import { type NextPage } from "next";
import Head from "next/head";
import { Layout } from "../features/Layout";
import Link from "next/link";
import { useProposals } from "src/hooks/useProposals";
import { useGetProposalState } from "src/hooks/useCreateProposal";

const LandingVoting: NextPage = () => {
  const proposals = useProposals();

  return (
    <>
      <Head>
        <title>Voting Overview</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Vote for Actions for{" "}
            <span className="text-accent">BCN Poblenou</span>
          </h1>
          <div>
            <Link className="btn-secondary btn" href="/createVoting">
              Create new Voting
            </Link>
          </div>
          <div className="flex w-full px-4 py-16">
            <div className="w-full overflow-x-auto">
              <table className="table w-full">
                <thead>
                  <tr>
                    <th>Tx</th>
                    <th>Description</th>
                    <th>Vote End</th>
                    <th>Vote Start</th>
                    <th>Status</th>
                    <th>CTA</th>
                  </tr>
                </thead>
                <tbody>
                  {proposals.data?.proposalCreateds.map((item) => (
                    <tr key={item.id}>
                      <td>
                        {" "}
                        <Link
                          className="link-info link hover:link-hover"
                          href={
                            "https://zksync2-testnet.zkscan.io/tx/" +
                            item.transactionHash
                          }
                        >
                          {item.transactionHash.substring(0, 10) + "..."}
                        </Link>
                      </td>
                      <td>{item.description.substring(0, 50) + "..."}</td>
                      <td>{item.voteEnd}</td>
                      <td>{item.voteStart}</td>
                      <td>
                        <ProposalStatus proposalID={item.proposalId} />
                      </td>
                      <td>
                        <Link
                          className="btn-accent btn"
                          href={"/voting/" + item.proposalId}
                        >
                          Details
                        </Link>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </Layout>
    </>
  );
};

export default LandingVoting;

export const ProposalStatus = (props: { proposalID: string }) => {
  const proposalState = useGetProposalState({ proposalId: props.proposalID });
  return proposalState.isLoading ? (
    <div>Loading...</div>
  ) : (
    <div>{proposalState.data}</div>
  );
};
