/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface ISystemContextInterface extends utils.Interface {
  functions: {
    "baseFee()": FunctionFragment;
    "blockGasLimit()": FunctionFragment;
    "blockHash(uint256)": FunctionFragment;
    "chainId()": FunctionFragment;
    "coinbase()": FunctionFragment;
    "difficulty()": FunctionFragment;
    "gasPrice()": FunctionFragment;
    "getBlockHashEVM(uint256)": FunctionFragment;
    "getBlockNumber()": FunctionFragment;
    "getBlockNumberAndTimestamp()": FunctionFragment;
    "getBlockTimestamp()": FunctionFragment;
    "origin()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "baseFee"
      | "blockGasLimit"
      | "blockHash"
      | "chainId"
      | "coinbase"
      | "difficulty"
      | "gasPrice"
      | "getBlockHashEVM"
      | "getBlockNumber"
      | "getBlockNumberAndTimestamp"
      | "getBlockTimestamp"
      | "origin"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blockGasLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(functionFragment: "coinbase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "difficulty",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBlockHashEVM",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockNumberAndTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "origin", values?: undefined): string;

  decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blockGasLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blockHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coinbase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "difficulty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHashEVM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockNumberAndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "origin", data: BytesLike): Result;

  events: {};
}

export interface ISystemContext extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISystemContextInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    baseFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockGasLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    blockHash(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    coinbase(overrides?: CallOverrides): Promise<[string]>;

    difficulty(overrides?: CallOverrides): Promise<[BigNumber]>;

    gasPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBlockNumberAndTimestamp(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        blockTimestamp: BigNumber;
      }
    >;

    getBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    origin(overrides?: CallOverrides): Promise<[string]>;
  };

  baseFee(overrides?: CallOverrides): Promise<BigNumber>;

  blockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

  blockHash(_block: BigNumberish, overrides?: CallOverrides): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  coinbase(overrides?: CallOverrides): Promise<string>;

  difficulty(overrides?: CallOverrides): Promise<BigNumber>;

  gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockHashEVM(
    _block: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getBlockNumberAndTimestamp(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      blockTimestamp: BigNumber;
    }
  >;

  getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  origin(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    blockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    blockHash(_block: BigNumberish, overrides?: CallOverrides): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    coinbase(overrides?: CallOverrides): Promise<string>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumberAndTimestamp(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        blockTimestamp: BigNumber;
      }
    >;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    origin(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    baseFee(overrides?: CallOverrides): Promise<BigNumber>;

    blockGasLimit(overrides?: CallOverrides): Promise<BigNumber>;

    blockHash(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    coinbase(overrides?: CallOverrides): Promise<BigNumber>;

    difficulty(overrides?: CallOverrides): Promise<BigNumber>;

    gasPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockNumberAndTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    origin(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    baseFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockGasLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockHash(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    coinbase(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    difficulty(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gasPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockHashEVM(
      _block: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockNumberAndTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    origin(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
