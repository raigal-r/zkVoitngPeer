/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../../../common";

export interface INonceHolderInterface extends utils.Interface {
  functions: {
    "getDeploymentNonce(address)": FunctionFragment;
    "getMinNonce(address)": FunctionFragment;
    "getRawNonce(address)": FunctionFragment;
    "getValueUnderNonce(uint256)": FunctionFragment;
    "increaseMinNonce(uint256)": FunctionFragment;
    "incrementDeploymentNonce(address)": FunctionFragment;
    "incrementMinNonceIfEquals(uint256)": FunctionFragment;
    "isNonceUsed(address,uint256)": FunctionFragment;
    "setValueUnderNonce(uint256,uint256)": FunctionFragment;
    "validateNonceUsage(address,uint256,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getDeploymentNonce"
      | "getMinNonce"
      | "getRawNonce"
      | "getValueUnderNonce"
      | "increaseMinNonce"
      | "incrementDeploymentNonce"
      | "incrementMinNonceIfEquals"
      | "isNonceUsed"
      | "setValueUnderNonce"
      | "validateNonceUsage"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getDeploymentNonce",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getMinNonce", values: [string]): string;
  encodeFunctionData(functionFragment: "getRawNonce", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getValueUnderNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMinNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementDeploymentNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementMinNonceIfEquals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isNonceUsed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValueUnderNonce",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validateNonceUsage",
    values: [string, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDeploymentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRawNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueUnderNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseMinNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementDeploymentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementMinNonceIfEquals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNonceUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValueUnderNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateNonceUsage",
    data: BytesLike
  ): Result;

  events: {
    "ValueSetUnderNonce(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ValueSetUnderNonce"): EventFragment;
}

export interface ValueSetUnderNonceEventObject {
  accountAddress: string;
  key: BigNumber;
  value: BigNumber;
}
export type ValueSetUnderNonceEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  ValueSetUnderNonceEventObject
>;

export type ValueSetUnderNonceEventFilter =
  TypedEventFilter<ValueSetUnderNonceEvent>;

export interface INonceHolder extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INonceHolderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRawNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValueUnderNonce(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseMinNonce(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    incrementDeploymentNonce(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    incrementMinNonceIfEquals(
      _expectedNonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    isNonceUsed(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setValueUnderNonce(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    validateNonceUsage(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  getDeploymentNonce(
    _address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinNonce(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

  getRawNonce(_address: string, overrides?: CallOverrides): Promise<BigNumber>;

  getValueUnderNonce(
    _key: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseMinNonce(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  incrementDeploymentNonce(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  incrementMinNonceIfEquals(
    _expectedNonce: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  isNonceUsed(
    _address: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setValueUnderNonce(
    _key: BigNumberish,
    _value: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  validateNonceUsage(
    _address: string,
    _key: BigNumberish,
    _shouldBeUsed: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    getDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRawNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueUnderNonce(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseMinNonce(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incrementMinNonceIfEquals(
      _expectedNonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isNonceUsed(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setValueUnderNonce(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validateNonceUsage(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ValueSetUnderNonce(address,uint256,uint256)"(
      accountAddress?: string | null,
      key?: BigNumberish | null,
      value?: null
    ): ValueSetUnderNonceEventFilter;
    ValueSetUnderNonce(
      accountAddress?: string | null,
      key?: BigNumberish | null,
      value?: null
    ): ValueSetUnderNonceEventFilter;
  };

  estimateGas: {
    getDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRawNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueUnderNonce(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseMinNonce(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    incrementDeploymentNonce(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    incrementMinNonceIfEquals(
      _expectedNonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    isNonceUsed(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setValueUnderNonce(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    validateNonceUsage(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDeploymentNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRawNonce(
      _address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueUnderNonce(
      _key: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseMinNonce(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    incrementDeploymentNonce(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    incrementMinNonceIfEquals(
      _expectedNonce: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    isNonceUsed(
      _address: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setValueUnderNonce(
      _key: BigNumberish,
      _value: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    validateNonceUsage(
      _address: string,
      _key: BigNumberish,
      _shouldBeUsed: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
